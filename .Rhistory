cachematrix
cachematrix()
cachematrix.R
makeCacheMatrix()
makeCacheMatrix()
makeCacheMatrix
makeCacheMatrix()
makeCacheMatrix
makeCacheMatrix
makeCacheMatrix
makeCacheMatrix
## Put comments here that give an overall description of what your
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix()
x<-matrix(1,2,3,4)
x
x<-matrix(1:4,2,2)
x
solve(x)
makeCacheMatrix(x)
cacheSolve(x)
y<-makeCacheMatrix(x)
y
y$get()
y$set(matrix(2:5,2,2))
y$get
y$get()
y$getmatrix()
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
x<-matrix(1:4,2,2)
x
CacheSolve(x)
cacheSolve(x)
x<makeCacheMatrix(matrix(1:4,2,2))
x<-makeCacheMatrix(matrix(1:4,2,2))
x$get()
x$getmatrix()
cacheSolve(x)
a<-matrix(1:4,2,2)
b<-matrix(1:4,2,2)
identical(a,b)
isTrue(all.equal(a,b))
isTRUE(all.equal(a,b))
b<-matrix(2:4,2,2)
b<-matrix(2:5,2,2)
identical(a,b)
isTRUE(all.equal(a,b))
cacheSolve(x)
x<-makeCacheMatrix(matrix(2:5,2,2))
x$get()
cacheSolve(x)
y<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(y)
## Functions that cache the inverse of a matrix
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
x<-makeCacheMatrix(matrix(2:5,2,2))
cacheSolve(x)
cacheSolve(x)
x$get()
